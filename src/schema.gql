# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Query {
  """
  Provides prayer timings and Islamic date for a given date. If date is not provided, the current date in the given timezone *(`America/Toronto` by default)* will be used.
  """
  date(date: DateInput, params: CalculationParams!): ResponseType!

  """
  Provides prayer timings and Islamic date for a given month of a given year. If month or year is not provided, the current month or year in the given timezone *(`America/Toronto` by default)* will be used.
  """
  month(year: Int, month: Int, params: CalculationParams!): [ResponseType!]!

  """
  Provides prayer timings and Islamic date for a given range of days *(start inclusive, end exclusive)*. Start date must be before end date.
  """
  range(end: DateInput!, start: DateInput!, params: CalculationParams!): [ResponseType!]!

  """Provides all allowed values for timezones."""
  timezones: [String!]!

  """
  Provides all allowed values for calculation authorities as well as detailed explanations.
  """
  authorities: [Option!]!
}

type ResponseType {
  timings: Timings!
  date: DateType!
  params: ParamsUsed!
}

"""
The `Timings` type provides all the timings pertinent to Islamic prayers.
"""
type Timings {
  Imsak: Timing!
  Fajr: Timing!
  Sunrise: Timing!
  Dhuhr: Timing!
  Asr: Timing!
  Maghrib: Timing!
  Isha: Timing!
  Midnight: Timing!
}

"""
The `Timing` type provides a timing as a timestamp as well as in readable format.
"""
type Timing {
  timestamp: Timestamp!
  readable: Readable!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

"""
The `Readable` type provides a time in military format, default AM/PM format and numerically. E.g. `1:32 PM`, `13:32` and `{ hour: 13, minute: 32 }`
"""
type Readable {
  military: String!
  default: String!
  numerical: Numerical!
}

"""The `Numerical` type express a time numerically in hours and minutes. """
type Numerical {
  hour: Int!
  minute: Int!
}

"""
The `DateType` type provides a date in Gregorian format, Hijri format and as a timestamp.
"""
type DateType {
  timestamp: Timestamp!

  """Gregorian date"""
  gregorian: Gregorian!

  """Islamic Hijri date"""
  hijri: Hijri!
}

"""The `Gregorian` type provides a Gregorian date in various formats."""
type Gregorian {
  """Readable date in the format: Thursday, April 27th, 2023"""
  readable: String!

  """Integer value for the year"""
  year: Int!

  """Month in various formats"""
  month: GregorianMonth!

  """Date of the month"""
  date: Int!

  """String day of the week E.g. Wednesday"""
  day: String!
}

"""
The `GregorianMonth` type provides the Gregorian month as number from 1-12 as well as in it's long form. E.g. `January`
"""
type GregorianMonth {
  """Integer from 1-12 for the month of the year"""
  number: Int!

  """Readable long-form month of the year. E.g. September, October, etc."""
  readable: String!
}

"""The `Hijri` type provides the Islamic Hijri date in various formats."""
type Hijri {
  """Readable Hijri date in the format: Thursday, Shawwal 7, 1444"""
  readable: String!

  """Integer Hijri year value. E.g. 1443"""
  year: Int!

  """Hijri month in various formats"""
  month: HijriMonth!

  """Integer day of the month"""
  date: Int!

  """Day of the week in arabic and english"""
  day: HijriReadable!
}

"""
The `HijriMonth` type provides the Islamic Hijri month as a number from 1-12 as well as in readable format.
"""
type HijriMonth {
  """Integer from 1-12 for the month of the year"""
  number: Int!

  """Readable long-form month in Arabic and English"""
  readable: HijriReadable!
}

"""
The `HijriReadable` type provides an Islamic Hijri date value in Arabic and English.
"""
type HijriReadable {
  en: String!
  ar: String!
}

type ParamsUsed {
  lat: Float!
  lng: Float!
  madhab: String!
  authority: String!
  anglesUsed: AnglesType!
  timezone: String!
  dateReadable: String!
  timingAdjustment: TimingAdjustment
  hijriDateAdjustment: Int
}

type AnglesType {
  fajr: Int!
  isha: Int
}

"""
The `TimingAdjustment` type is used to provide optional adjustments for any of the Islamic prayer times.
"""
type TimingAdjustment {
  Imsak: Int
  Fajr: Int
  Sunrise: Int
  Dhuhr: Int
  Asr: Int
  Maghrib: Int
  Isha: Int
  Midnight: Int
}

"""
The `DateInput` type is used for inputting dates. Year, month and day values must be provided, whereas, hour, minute and second values will be defaulted to `0`.
"""
input DateInput {
  year: Int!
  month: Int!
  day: Int!
  hour: Int! = 0
  minute: Int! = 0
  second: Int! = 0
}

input CalculationParams {
  """
  Fiqhi Madhab used to calculate Asr time. The Hanafi method regards Asr time as when the shadow of an object is twice its length. All other madhabs (Shafi) follow the opinion that it is when the shadow is the same length as the object.
  """
  madhab: String! = "Shafi"

  """
  Islamic Authority used to calculate Fajr and Isha times. Each authority has set different angles for the sun's position to calculate Fajr and Isha. Use `Query.authorities` to see all available options with explanations.
  """
  authority: String! = "ISNA"

  """
  Latitude value to calculate prayer times. Longitude value MUST also be provided.
  """
  lat: Float

  """
  Longitude value to calculate prayer times. Latitude value MUST also be provided.
  """
  lng: Float

  """
  City name used to find latitude/longitude for calculations. Country **MUST** also be provided
  """
  city: String

  """
  Country name used to find latitude/longitude for calculations. City **MUST** also be provided
  """
  country: String

  """
  Timezone value to calculate prayer times and provide date. Use `Query.timezones` to see all allowed values. E.g. `America/Toronto`
  """
  timezone: String! = "America/Toronto"

  """
  Optionally define custom sun position angles for Fajr and Isha calculations.
  """
  customAngles: AnglesInput

  """Adjust prayer times by x minutes for each time."""
  timingAdjustment: TimingAdjustmentInput

  """Adjust the Hijri date by x days."""
  hijriDateAdjustment: Int
}

"""
The `AnglesInput` type is used to input custom sun position angles for the Fajr and Isha prayers.
"""
input AnglesInput {
  fajr: Int!
  isha: Int!
}

"""
The `TimingAdjustmentInput` type is used to input optional adjustments for each prayer timing. Any `Int` value provided for any prayer will increment/decrement that prayer time in minutes.
"""
input TimingAdjustmentInput {
  Imsak: Int
  Fajr: Int
  Sunrise: Int
  Dhuhr: Int
  Asr: Int
  Maghrib: Int
  Isha: Int
  Midnight: Int
}

"""
The `Option` type is used to provide more detailed explanations for options.
"""
type Option {
  value: String!
  fullName: String
  explanation: String
}